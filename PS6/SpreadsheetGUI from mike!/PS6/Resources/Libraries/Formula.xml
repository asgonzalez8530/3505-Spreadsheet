<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Formula</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.Formula">
            <summary>
            Represents formulas written in standard infix notation using standard precedence
            rules.  The allowed symbols are non-negative numbers written using double-precision 
            floating-point syntax; variables that consist of a letter or underscore followed by 
            zero or more letters, underscores, or digits; parentheses; and the four operator 
            symbols +, -, *, and /.  
            
            Spaces are significant only insofar that they delimit tokens.  For example, "xy" is
            a single variable, "x y" consists of two variables "x" and y; "x23" is a single variable; 
            and "x 23" consists of a variable "x" and a number "23".
            
            Associated with every formula are two delegates:  a normalizer and a validator.  The
            normalizer is used to convert variables into a canonical form, and the validator is used
            to add extra restrictions on the validity of a variable (beyond the standard requirement 
            that it consist of a letter or underscore followed by zero or more letters, underscores,
            or digits.)  Their use is described in detail in the constructor and method comments.
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.Formula.fe">
            <summary>
            If there is a format error, this will contain 
            the correct string contents, and the reason.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String)">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically invalid,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer is the identity function, and the associated validator
            maps every string to true.  
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.#ctor(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Creates a Formula from a string that consists of an infix expression written as
            described in the class comment.  If the expression is syntactically incorrect,
            throws a FormulaFormatException with an explanatory Message.
            
            The associated normalizer and validator are the second and third parameters,
            respectively.  
            
            If the formula contains a variable v such that normalize(v) is not a legal variable, 
            throws a FormulaFormatException with an explanatory message. 
            
            If the formula contains a variable v such that isValid(normalize(v)) is false,
            throws a FormulaFormatException with an explanatory message.
            
            Suppose that N is a method that converts all the letters in a string to upper case, and
            that V is a method that returns true only if a string consists of one letter followed
            by one digit.  Then:
            
            new Formula("x2+y3", N, V) should succeed
            new Formula("x+y3", N, V) should throw an exception, since V(N("x")) is false
            new Formula("2x+y3", N, V) should throw an exception, since "2x+y3" is syntactically incorrect.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpreadsheetUtilities.Formula.CleanAndValidate(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String},System.Func{System.String,System.Boolean})" -->
        <member name="M:SpreadsheetUtilities.Formula.DoubleNormalize(System.String)">
            <summary>
            Takes in a string value, if it can be parsed to a double d, returns 
            the d.ToString() else returns v unchanged. 
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Evaluate(System.Func{System.String,System.Double})">
             <summary>
             Evaluates this Formula, using the lookup delegate to determine the values of
             variables.  When a variable symbol v needs to be determined, it should be looked up
             via lookup(normalize(v)). (Here, normalize is the normalizer that was passed to 
             the constructor.)
             
             For example, if L("x") is 2, L("X") is 4, and N is a method that converts all the letters 
             in a string to upper case:
             
             new Formula("x+7", N, s => true).Evaluate(L) is 11
             new Formula("x+7").Evaluate(L) is 9
             
             Given a variable symbol as its parameter, lookup returns the variable's value 
             (if it has one) or throws an ArgumentException (otherwise).
             
             If no undefined variables or divisions by zero are encountered when evaluating 
             this Formula, the value is returned.  Otherwise, a FormulaError is returned.  
             The Reason property of the FormulaError should have a meaningful explanation.
            
             This method should never throw an exception.
             </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.HandleDouble(System.Double,System.Collections.Generic.Stack{System.Double},System.Collections.Generic.Stack{System.String})">
            <summary>
            If * or / is at the top of the operator stack, pops the value stack and pops the operator stack. 
            then applies the popped operator to the popped number and t. Pushes the result onto the value stack.
            Otherwise, pushes t onto the value stack.
            
            </summary>
            <param name="t">the double token</param>
            <param name="values">a stack containing values for the evaluate method</param>
            <param name="operators">a stack containing operators for the evaluate method</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ApplyOperatorStack(System.Collections.Generic.Stack{System.Double},System.Collections.Generic.Stack{System.String})">
            <summary>
            Pops the value stack twice and the operator stack once, then applies the 
            popped operator to the popped values, then pushes the result onto the value stack.
            
            </summary>
            <param name="values">a stack containing values for the evaluate method</param>
            <param name="operators">a stack containing operators for the evaluate method</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ApplyOperator(System.Double,System.Double,System.String)">
            <summary>
            Applies the operator op to val1 and val2 respectively and returns the result
            For example, if op is "*" will return val1 * val2. 
            
            The only valid operators are "+", "-", "*", and "/". 
            
            If val2 = 0 and op = "/" will throw ArgumentException.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetVariables">
            <summary>
            Enumerates the normalized versions of all of the variables that occur in this 
            formula.  No normalization may appear more than once in the enumeration, even 
            if it appears more than once in this Formula.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x+y*z", N, s => true).GetVariables() should enumerate "X", "Y", and "Z"
            new Formula("x+X*z", N, s => true).GetVariables() should enumerate "X" and "Z".
            new Formula("x+X*z").GetVariables() should enumerate "x", "X", and "z".
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ToString">
            <summary>
            Returns a string containing no spaces which, if passed to the Formula
            constructor, will produce a Formula f such that this.Equals(f).  All of the
            variables in the string should be normalized.
            
            For example, if N is a method that converts all the letters in a string to upper case:
            
            new Formula("x + y", N, s => true).ToString() should return "X+Y"
            new Formula("x + Y").ToString() should return "x+Y"
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.Equals(System.Object)">
            <summary>
            If obj is null or obj is not a Formula, returns false.  Otherwise, reports
            whether or not this Formula and obj are equal.
            
            Two Formulae are considered equal if they consist of the same tokens in the
            same order.  To determine token equality, all tokens are compared as strings 
            except for numeric tokens and variable tokens.
            Numeric tokens are considered equal if they are equal after being "normalized" 
            by C#'s standard conversion from string to double, then back to string. This 
            eliminates any inconsistencies due to limited floating point precision.
            Variable tokens are considered equal if their normalized forms are equal, as 
            defined by the provided normalizer.
            
            For example, if N is a method that converts all the letters in a string to upper case:
             
            new Formula("x1+y2", N, s => true).Equals(new Formula("X1  +  Y2")) is true
            new Formula("x1+y2").Equals(new Formula("X1+Y2")) is false
            new Formula("x1+y2").Equals(new Formula("y2+x1")) is false
            new Formula("2.0 + x7").Equals(new Formula("2.000 + x7")) is true
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Equality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 == f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return true.  If one is
            null and one is not, this method should return false.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.op_Inequality(SpreadsheetUtilities.Formula,SpreadsheetUtilities.Formula)">
            <summary>
            Reports whether f1 != f2, using the notion of equality from the Equals method.
            Note that if both f1 and f2 are null, this method should return false.  If one is
            null and one is not, this method should return true.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetHashCode">
            <summary>
            Returns a hash code for this Formula.  If f1.Equals(f2), then it must be the
            case that f1.GetHashCode() == f2.GetHashCode().  Ideally, the probability that two 
            randomly-generated unequal Formulae have the same hash code should be extremely small.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.VerifySyntaxAndGetVariables(System.Collections.Generic.List{System.String})">
            <summary>
            Takes a list of valid tokens making up this formula and enumerates each variable.
            
            If there is a syntax error in the cleaned tokens, throws a FormulaFormatException. 
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ExtraFollowRule(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Extra Follow Rule: Any token that immediately follows a number, a variable, or a closing  
            parenthesis must be either an operator or a closing parenthesis.
            
            If the Extra Follow Rule is violated, throws a FormulaFormatException
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.ParenthesesFollowRule(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Parentheses Follow Rule: Any token that immediately follows an opening parenthesis or
            an operator must be either a number, a variable, or an opening parenthesis.
            
            If the Parentheses Follow Rule is violated, throws a FormulaFormatException
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.EndingTokenRule(System.Collections.Generic.List{System.String})">
            <summary>
            Ending Token Rule: The last token of an expression must be a number, a variable, or a closing parenthesis.
            
            If the Ending Token Rule is violated, throws a FormulaFormatException
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.StartingTokenRule(System.Collections.Generic.List{System.String})">
            <summary>
            Starting Token Rule: The first token of an expression must be a number, a variable, or an opening parenthesis.
            
            If Starting Token Rule is violated, throws FormulaFormatException
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.OneTokenRule(System.Collections.Generic.List{System.String})">
            <summary>
            One Token Rule: there must be at least one token.
            
            If One Token Rule is violated, throws FormulaFormatException
            </summary>
            <param name="cleanedTokens"></param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.BalancedParenthesesRule(System.Int32)">
            <summary>
            Balanced Parentheses Rule: The total number of opening parentheses must equal the total number 
            of closing parentheses.
            
            Takes an int which represents the number of opening parentheses minus the number of closing
            parentheses. If Balanced Parentheses rule is violated throws FormulaFormatException.
            </summary>
            <param name="parenthesesCount"> The number of opening parentheses minus the number of closing
            parentheses</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.RightParenthesesRule(System.Int32)">
            <summary>
            Right Parenthesis Rule: When reading tokens from left to right, at no point should 
            the number of closing parentheses seen so far be greater than the number of opening 
            parentheses seen so far.
            
            Takes an int which represents the number of opening parentheses minus the number of closing
            parentheses seen thus far when read from left to right. If right parenthesis rule is violated
            throws FormulaFormatException.
            </summary>
            <param name="parenthesesCount"> The number of opening parentheses minus the number of closing
            parentheses seen thus far when read from left to right</param>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.GetTokens(System.String)">
            <summary>
            Given an expression, enumerates the tokens that compose it.  Tokens are left paren;
            right paren; one of the four operator symbols; a string consisting of a letter or underscore
            followed by zero or more letters, digits, or underscores; a double literal; and anything that doesn't
            match one of those patterns.  There are no empty tokens, and no token contains white space.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.Formula.IsValidToken(System.String)">
            <summary>
            Takes in a string, token, and returns true if it's a valid token
            
            Tokens are valid if they are  "(", ")", "+", "-", "*", or "/".
            Tokens are also valid if it is a string which consists of a letter
            or underscore followed by zero or more letters, underscores,
            or digits or is a valid floating point number.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaFormatException">
            <summary>
            Used to report syntactic errors in the argument to the Formula constructor.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaFormatException.#ctor(System.String)">
            <summary>
            Constructs a FormulaFormatException containing the explanatory message.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.FormulaError">
            <summary>
            Used as a possible return value of the Formula.Evaluate method.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormulaError.#ctor(System.String)">
            <summary>
            Constructs a FormulaError containing the explanatory reason.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="P:SpreadsheetUtilities.FormulaError.Reason">
            <summary>
             The reason why this FormulaError was created.
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.FormatError">
            <summary>
            Used as a possible return value of the Formula.Evaluate method.
            
            ADDED for CS 3505 (as a substitute for FormulaFormatException)
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.FormatError.#ctor(System.String,System.String)">
            <summary>
            Constructs a FormatError containing the explanatory reason.
            </summary>
            <param name="reason"></param>
            <param name="contents"></param>
        </member>
        <member name="P:SpreadsheetUtilities.FormatError.Reason">
            <summary>
             The reason why this FormatError was created.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.FormatError.Contents">
            <summary>
             The contents of this bad Formula.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.ExtensionMethods.StartsWithNumber(System.String)">
            <summary>
            Returns true if string begins with a number
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.ExtensionMethods.StartsWithLetterOrUnderscore(System.String)">
            <summary>
            Returns true if this string begins with a letter of the english alphabet or an underscore
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.ExtensionMethods.IsOperator(System.String)">
            <summary>
            Returns true if this string is an operator '+', '-', '*' or '/'.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.ExtensionMethods.IsAtTop(System.Collections.Generic.Stack{System.String},System.String)">
            <summary>
            Takes a string s and returns true if a string matching s is at the 
            top of the stack, else returns false.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.ExtensionMethods.HasNext(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Takes an index and returns true if there is an item contained in this
            list after that index. Else returns false.
            </summary>
        </member>
    </members>
</doc>
